<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>_next (grpc/_channel.py:681) (143 samples, 2.68%)</title><rect x="1.7422%" y="164" width="2.6789%" height="15" fill="rgb(227,0,7)"/><text x="1.9922%" y="174.50">_n..</text></g><g><title>_next (grpc/_channel.py:697) (82 samples, 1.54%)</title><rect x="4.5335%" y="164" width="1.5362%" height="15" fill="rgb(217,0,24)"/><text x="4.7835%" y="174.50"></text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:526) (352 samples, 6.59%)</title><rect x="0.0000%" y="132" width="6.5942%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="142.50">__poll_gr..</text></g><g><title>__next__ (grpc/_channel.py:416) (328 samples, 6.14%)</title><rect x="0.4496%" y="148" width="6.1446%" height="15" fill="rgb(248,212,6)"/><text x="0.6996%" y="158.50">__next__..</text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:527) (177 samples, 3.32%)</title><rect x="6.5942%" y="132" width="3.3158%" height="15" fill="rgb(208,68,35)"/><text x="6.8442%" y="142.50">__p..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:770) (93 samples, 1.74%)</title><rect x="8.1679%" y="148" width="1.7422%" height="15" fill="rgb(232,128,0)"/><text x="8.4179%" y="158.50"></text></g><g><title>_write_to_self (asyncio/selector_events.py:138) (87 samples, 1.63%)</title><rect x="8.2803%" y="164" width="1.6298%" height="15" fill="rgb(207,160,47)"/><text x="8.5303%" y="174.50"></text></g><g><title>_worker (concurrent/futures/thread.py:78) (80 samples, 1.50%)</title><rect x="9.9850%" y="132" width="1.4987%" height="15" fill="rgb(228,23,34)"/><text x="10.2350%" y="142.50"></text></g><g><title>__run_sync_func (azure_functions_worker/dispatcher.py:488) (71 samples, 1.33%)</title><rect x="13.4695%" y="164" width="1.3301%" height="15" fill="rgb(218,30,26)"/><text x="13.7195%" y="174.50"></text></g><g><title>main (SyncHttpTriggerHelloWorld/__init__.py:7) (59 samples, 1.11%)</title><rect x="13.6943%" y="180" width="1.1053%" height="15" fill="rgb(220,122,19)"/><text x="13.9443%" y="190.50"></text></g><g><title>run (concurrent/futures/thread.py:57) (96 samples, 1.80%)</title><rect x="13.0199%" y="148" width="1.7984%" height="15" fill="rgb(250,228,42)"/><text x="13.2699%" y="158.50">r..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:767) (55 samples, 1.03%)</title><rect x="17.5347%" y="212" width="1.0303%" height="15" fill="rgb(240,193,28)"/><text x="17.7847%" y="222.50"></text></g><g><title>_write_to_self (asyncio/selector_events.py:138) (60 samples, 1.12%)</title><rect x="18.8460%" y="228" width="1.1240%" height="15" fill="rgb(216,20,37)"/><text x="19.0960%" y="238.50"></text></g><g><title>_worker (concurrent/futures/thread.py:80) (460 samples, 8.62%)</title><rect x="11.4837%" y="132" width="8.6175%" height="15" fill="rgb(206,188,39)"/><text x="11.7337%" y="142.50">_worker (con..</text></g><g><title>run (concurrent/futures/thread.py:63) (282 samples, 5.28%)</title><rect x="14.8183%" y="148" width="5.2829%" height="15" fill="rgb(217,207,13)"/><text x="15.0683%" y="158.50">run (c..</text></g><g><title>set_result (concurrent/futures/_base.py:530) (205 samples, 3.84%)</title><rect x="16.2608%" y="164" width="3.8404%" height="15" fill="rgb(231,73,38)"/><text x="16.5108%" y="174.50">set_..</text></g><g><title>_invoke_callbacks (concurrent/futures/_base.py:328) (190 samples, 3.56%)</title><rect x="16.5418%" y="180" width="3.5594%" height="15" fill="rgb(225,20,46)"/><text x="16.7918%" y="190.50">_inv..</text></g><g><title>_call_set_state (asyncio/futures.py:374) (166 samples, 3.11%)</title><rect x="16.9914%" y="196" width="3.1098%" height="15" fill="rgb(210,31,41)"/><text x="17.2414%" y="206.50">_ca..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:770) (81 samples, 1.52%)</title><rect x="18.5837%" y="212" width="1.5174%" height="15" fill="rgb(221,200,47)"/><text x="18.8337%" y="222.50"></text></g><g><title>_worker (concurrent/futures/thread.py:87) (65 samples, 1.22%)</title><rect x="20.2698%" y="132" width="1.2177%" height="15" fill="rgb(226,26,5)"/><text x="20.5198%" y="142.50"></text></g><g><title>__enter__ (threading.py:247) (60 samples, 1.12%)</title><rect x="28.0067%" y="148" width="1.1240%" height="15" fill="rgb(249,33,26)"/><text x="28.2567%" y="158.50"></text></g><g><title>channel_spin (grpc/_channel.py:1138) (489 samples, 9.16%)</title><rect x="21.5811%" y="132" width="9.1607%" height="15" fill="rgb(235,183,28)"/><text x="21.8311%" y="142.50">channel_spin ..</text></g><g><title>handle_event (grpc/_channel.py:165) (79 samples, 1.48%)</title><rect x="31.4163%" y="148" width="1.4800%" height="15" fill="rgb(221,5,38)"/><text x="31.6663%" y="158.50"></text></g><g><title>__enter__ (threading.py:247) (63 samples, 1.18%)</title><rect x="31.7160%" y="164" width="1.1802%" height="15" fill="rgb(247,18,42)"/><text x="31.9660%" y="174.50"></text></g><g><title>_handle_event (grpc/_channel.py:137) (110 samples, 2.06%)</title><rect x="33.9453%" y="164" width="2.0607%" height="15" fill="rgb(241,131,45)"/><text x="34.1953%" y="174.50">_..</text></g><g><title>deserialize (grpc/_common.py:94) (93 samples, 1.74%)</title><rect x="34.2638%" y="180" width="1.7422%" height="15" fill="rgb(249,31,29)"/><text x="34.5138%" y="190.50"></text></g><g><title>_transform (grpc/_common.py:83) (82 samples, 1.54%)</title><rect x="34.4698%" y="196" width="1.5362%" height="15" fill="rgb(225,111,53)"/><text x="34.7198%" y="206.50"></text></g><g><title>handle_event (grpc/_channel.py:166) (168 samples, 3.15%)</title><rect x="32.8962%" y="148" width="3.1472%" height="15" fill="rgb(238,160,17)"/><text x="33.1462%" y="158.50">han..</text></g><g><title>handle_event (grpc/_channel.py:167) (73 samples, 1.37%)</title><rect x="36.0435%" y="148" width="1.3676%" height="15" fill="rgb(214,148,48)"/><text x="36.2935%" y="158.50"></text></g><g><title>notify_all (threading.py:371) (56 samples, 1.05%)</title><rect x="36.3619%" y="164" width="1.0491%" height="15" fill="rgb(232,36,49)"/><text x="36.6119%" y="174.50"></text></g><g><title>channel_spin (grpc/_channel.py:1141) (374 samples, 7.01%)</title><rect x="30.9292%" y="132" width="7.0064%" height="15" fill="rgb(209,103,24)"/><text x="31.1792%" y="142.50">channel_s..</text></g><g><title>gen (azure_functions_worker/dispatcher.py:518) (125 samples, 2.34%)</title><rect x="38.6474%" y="148" width="2.3417%" height="15" fill="rgb(229,88,8)"/><text x="38.8974%" y="158.50">g..</text></g><g><title>consume_request_iterator (grpc/_channel.py:195) (213 samples, 3.99%)</title><rect x="37.9918%" y="132" width="3.9903%" height="15" fill="rgb(213,181,19)"/><text x="38.2418%" y="142.50">cons..</text></g><g><title>consume_request_iterator (grpc/_channel.py:211) (88 samples, 1.65%)</title><rect x="42.0007%" y="132" width="1.6486%" height="15" fill="rgb(254,191,54)"/><text x="42.2507%" y="142.50"></text></g><g><title>serialize (grpc/_common.py:90) (80 samples, 1.50%)</title><rect x="42.1506%" y="148" width="1.4987%" height="15" fill="rgb(241,83,37)"/><text x="42.4006%" y="158.50"></text></g><g><title>_transform (grpc/_common.py:83) (79 samples, 1.48%)</title><rect x="42.1694%" y="164" width="1.4800%" height="15" fill="rgb(233,36,39)"/><text x="42.4194%" y="174.50"></text></g><g><title>consume_request_iterator (grpc/_channel.py:225) (160 samples, 3.00%)</title><rect x="44.6047%" y="132" width="2.9974%" height="15" fill="rgb(226,3,54)"/><text x="44.8547%" y="142.50">con..</text></g><g><title>consume_request_iterator (grpc/_channel.py:236) (65 samples, 1.22%)</title><rect x="47.8082%" y="132" width="1.2177%" height="15" fill="rgb(245,192,40)"/><text x="48.0582%" y="142.50"></text></g><g><title>__call__ (_pydev_bundle/pydev_monkey.py:823) (2,637 samples, 49.40%)</title><rect x="0.0000%" y="68" width="49.4005%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="78.50">__call__ (_pydev_bundle/pydev_monkey.py:823)</text></g><g><title>_bootstrap (threading.py:890) (2,637 samples, 49.40%)</title><rect x="0.0000%" y="84" width="49.4005%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="94.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (2,637 samples, 49.40%)</title><rect x="0.0000%" y="100" width="49.4005%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="110.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (2,637 samples, 49.40%)</title><rect x="0.0000%" y="116" width="49.4005%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="126.50">run (threading.py:870)</text></g><g><title>_on_run (pydevd.py:180) (59 samples, 1.11%)</title><rect x="49.6253%" y="116" width="1.1053%" height="15" fill="rgb(235,93,37)"/><text x="49.8753%" y="126.50"></text></g><g><title>_bootstrap (threading.py:890) (105 samples, 1.97%)</title><rect x="49.4005%" y="68" width="1.9670%" height="15" fill="rgb(213,116,39)"/><text x="49.6505%" y="78.50">_..</text></g><g><title>_bootstrap_inner (threading.py:932) (105 samples, 1.97%)</title><rect x="49.4005%" y="84" width="1.9670%" height="15" fill="rgb(222,207,29)"/><text x="49.6505%" y="94.50">_..</text></g><g><title>run (_pydevd_bundle/pydevd_daemon_thread.py:46) (105 samples, 1.97%)</title><rect x="49.4005%" y="100" width="1.9670%" height="15" fill="rgb(206,96,30)"/><text x="49.6505%" y="110.50">r..</text></g><g><title>&lt;dictcomp&gt; (azure_functions_worker/bindings/datumdef.py:60) (59 samples, 1.11%)</title><rect x="64.7059%" y="372" width="1.1053%" height="15" fill="rgb(218,138,4)"/><text x="64.9559%" y="382.50"></text></g><g><title>from_typed_data (azure_functions_worker/bindings/datumdef.py:60) (82 samples, 1.54%)</title><rect x="64.6871%" y="356" width="1.5362%" height="15" fill="rgb(250,191,14)"/><text x="64.9371%" y="366.50"></text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:64) (212 samples, 3.97%)</title><rect x="64.0502%" y="340" width="3.9715%" height="15" fill="rgb(239,60,40)"/><text x="64.3002%" y="350.50">from..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:66) (92 samples, 1.72%)</title><rect x="68.3402%" y="340" width="1.7235%" height="15" fill="rgb(206,27,48)"/><text x="68.5902%" y="350.50"></text></g><g><title>decode (functions/http.py:126) (56 samples, 1.05%)</title><rect x="70.3072%" y="356" width="1.0491%" height="15" fill="rgb(225,35,8)"/><text x="70.5572%" y="366.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:319) (449 samples, 8.41%)</title><rect x="63.3196%" y="324" width="8.4114%" height="15" fill="rgb(250,213,24)"/><text x="63.5696%" y="334.50">_handle__inv..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:74) (83 samples, 1.55%)</title><rect x="70.1761%" y="340" width="1.5549%" height="15" fill="rgb(247,123,22)"/><text x="70.4261%" y="350.50"></text></g><g><title>run_in_executor (asyncio/base_events.py:782) (92 samples, 1.72%)</title><rect x="73.0985%" y="340" width="1.7235%" height="15" fill="rgb(231,138,38)"/><text x="73.3485%" y="350.50"></text></g><g><title>run_in_executor (asyncio/base_events.py:783) (101 samples, 1.89%)</title><rect x="74.8220%" y="340" width="1.8921%" height="15" fill="rgb(231,145,46)"/><text x="75.0720%" y="350.50">r..</text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:341) (269 samples, 5.04%)</title><rect x="71.8059%" y="324" width="5.0393%" height="15" fill="rgb(251,118,11)"/><text x="72.0559%" y="334.50">_handl..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:90) (166 samples, 3.11%)</title><rect x="78.4376%" y="340" width="3.1098%" height="15" fill="rgb(217,147,25)"/><text x="78.6876%" y="350.50">to_..</text></g><g><title>datum_as_proto (azure_functions_worker/bindings/datumdef.py:104) (85 samples, 1.59%)</title><rect x="81.6036%" y="356" width="1.5924%" height="15" fill="rgb(247,81,37)"/><text x="81.8536%" y="366.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:370) (334 samples, 6.26%)</title><rect x="77.5197%" y="324" width="6.2570%" height="15" fill="rgb(209,12,38)"/><text x="77.7697%" y="334.50">_handle_..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:98) (119 samples, 2.23%)</title><rect x="81.5474%" y="340" width="2.2293%" height="15" fill="rgb(227,1,9)"/><text x="81.7974%" y="350.50">t..</text></g><g><title>_dispatch_grpc_request (azure_functions_worker/dispatcher.py:229) (1,461 samples, 27.37%)</title><rect x="58.5238%" y="308" width="27.3698%" height="15" fill="rgb(248,47,43)"/><text x="58.7738%" y="318.50">_dispatch_grpc_request (azure_functions_work..</text></g><g><title>put_nowait (queue.py:190) (63 samples, 1.18%)</title><rect x="86.1933%" y="324" width="1.1802%" height="15" fill="rgb(221,10,30)"/><text x="86.4433%" y="334.50"></text></g><g><title>_dispatch_grpc_request (azure_functions_worker/dispatcher.py:230) (87 samples, 1.63%)</title><rect x="85.8936%" y="308" width="1.6298%" height="15" fill="rgb(210,229,1)"/><text x="86.1436%" y="318.50"></text></g><g><title>_read_from_self (asyncio/selector_events.py:120) (204 samples, 3.82%)</title><rect x="87.7670%" y="308" width="3.8217%" height="15" fill="rgb(222,148,37)"/><text x="88.0170%" y="318.50">_rea..</text></g><g><title>_set_state (asyncio/futures.py:356) (235 samples, 4.40%)</title><rect x="92.0007%" y="308" width="4.4024%" height="15" fill="rgb(234,67,33)"/><text x="92.2507%" y="318.50">_set_..</text></g><g><title>_copy_future_state (asyncio/futures.py:335) (102 samples, 1.91%)</title><rect x="94.4923%" y="324" width="1.9108%" height="15" fill="rgb(247,98,35)"/><text x="94.7423%" y="334.50">_..</text></g><g><title>call_soon (asyncio/base_events.py:723) (57 samples, 1.07%)</title><rect x="95.3353%" y="340" width="1.0678%" height="15" fill="rgb(247,138,52)"/><text x="95.5853%" y="350.50"></text></g><g><title>__init__ (azure_functions_worker/dispatcher.py:564) (92 samples, 1.72%)</title><rect x="97.0588%" y="340" width="1.7235%" height="15" fill="rgb(213,79,30)"/><text x="97.3088%" y="350.50"></text></g><g><title>create_task (asyncio/base_events.py:435) (149 samples, 2.79%)</title><rect x="96.7778%" y="308" width="2.7913%" height="15" fill="rgb(246,177,23)"/><text x="97.0278%" y="318.50">cr..</text></g><g><title>&lt;lambda&gt; (azure_functions_worker/dispatcher.py:110) (148 samples, 2.77%)</title><rect x="96.7966%" y="324" width="2.7726%" height="15" fill="rgb(230,62,27)"/><text x="97.0466%" y="334.50">&lt;l..</text></g><g><title>_run (asyncio/events.py:81) (2,339 samples, 43.82%)</title><rect x="55.8636%" y="292" width="43.8179%" height="15" fill="rgb(216,154,8)"/><text x="56.1136%" y="302.50">_run (asyncio/events.py:81)</text></g><g><title>_run_once (asyncio/base_events.py:1859) (2,405 samples, 45.05%)</title><rect x="54.7396%" y="276" width="45.0543%" height="15" fill="rgb(244,35,45)"/><text x="54.9896%" y="286.50">_run_once (asyncio/base_events.py:1859)</text></g><g><title>run_forever (asyncio/base_events.py:570) (2,594 samples, 48.59%)</title><rect x="51.3676%" y="260" width="48.5950%" height="15" fill="rgb(251,115,12)"/><text x="51.6176%" y="270.50">run_forever (asyncio/base_events.py:570)</text></g><g><title>run (asyncio/runners.py:43) (2,595 samples, 48.61%)</title><rect x="51.3676%" y="228" width="48.6137%" height="15" fill="rgb(240,54,50)"/><text x="51.6176%" y="238.50">run (asyncio/runners.py:43)</text></g><g><title>run_until_complete (asyncio/base_events.py:603) (2,595 samples, 48.61%)</title><rect x="51.3676%" y="244" width="48.6137%" height="15" fill="rgb(233,84,52)"/><text x="51.6176%" y="254.50">run_until_complete (asyncio/base_events.py:603)</text></g><g><title>all (5,338 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="46.50"></text></g><g><title>process 59276:&quot;/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/Resources/Python.app/Contents/MacOS/Python /Users/varadmeru/.vscode/extensions/ms-python.python-2020.8.105369/pythonFiles/lib/python/debugpy --listen 127.0.0.1:9091 --wait-for-client /Users/varadmeru/work/microsoft/azfunctions/pyworker/worker.py --host 127.0.0.1 --port 50430 --workerId 9e20c11a-e674-430f-886d-dadb7bd4eb6b --requestId 90acf6e3-30ab-4d2c-862c-7db5235ee217 --grpcMaxMessageLength 2147483647&quot; (5,338 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="62.50">process 59276:&quot;/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/Resources/Python.app/Contents/MacOS/Python /Users/varadmeru/.vscode/extensio..</text></g><g><title>_run_module_as_main (runpy.py:194) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="68" width="48.6324%" height="15" fill="rgb(209,38,44)"/><text x="51.6176%" y="78.50">_run_module_as_main (runpy.py:194)</text></g><g><title>_run_code (runpy.py:87) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="84" width="48.6324%" height="15" fill="rgb(236,212,23)"/><text x="51.6176%" y="94.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (debugpy/__main__.py:45) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="100" width="48.6324%" height="15" fill="rgb(242,79,21)"/><text x="51.6176%" y="110.50">&lt;module&gt; (debugpy/__main__.py:45)</text></g><g><title>main (debugpy/server/cli.py:430) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="116" width="48.6324%" height="15" fill="rgb(211,96,35)"/><text x="51.6176%" y="126.50">main (debugpy/server/cli.py:430)</text></g><g><title>run_file (debugpy/server/cli.py:267) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="132" width="48.6324%" height="15" fill="rgb(253,215,40)"/><text x="51.6176%" y="142.50">run_file (debugpy/server/cli.py:267)</text></g><g><title>run_path (runpy.py:265) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="148" width="48.6324%" height="15" fill="rgb(211,81,21)"/><text x="51.6176%" y="158.50">run_path (runpy.py:265)</text></g><g><title>_run_module_code (runpy.py:97) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="164" width="48.6324%" height="15" fill="rgb(208,190,38)"/><text x="51.6176%" y="174.50">_run_module_code (runpy.py:97)</text></g><g><title>_run_code (runpy.py:87) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="180" width="48.6324%" height="15" fill="rgb(235,213,38)"/><text x="51.6176%" y="190.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (worker.py:20) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="196" width="48.6324%" height="15" fill="rgb(237,122,38)"/><text x="51.6176%" y="206.50">&lt;module&gt; (worker.py:20)</text></g><g><title>main (azure_functions_worker/main.py:40) (2,596 samples, 48.63%)</title><rect x="51.3676%" y="212" width="48.6324%" height="15" fill="rgb(244,218,35)"/><text x="51.6176%" y="222.50">main (azure_functions_worker/main.py:40)</text></g></svg></svg>