<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>_next (grpc/_channel.py:681) (73 samples, 1.53%)</title><rect x="0.8781%" y="148" width="1.5262%" height="15" fill="rgb(227,0,7)"/><text x="1.1281%" y="158.50"></text></g><g><title>_next (grpc/_channel.py:697) (92 samples, 1.92%)</title><rect x="2.5298%" y="148" width="1.9235%" height="15" fill="rgb(217,0,24)"/><text x="2.7798%" y="158.50">_..</text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:523) (229 samples, 4.79%)</title><rect x="0.0000%" y="116" width="4.7878%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="126.50">__poll..</text></g><g><title>__next__ (grpc/_channel.py:416) (219 samples, 4.58%)</title><rect x="0.2091%" y="132" width="4.5787%" height="15" fill="rgb(248,212,6)"/><text x="0.4591%" y="142.50">__nex..</text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:524) (93 samples, 1.94%)</title><rect x="4.7878%" y="116" width="1.9444%" height="15" fill="rgb(208,68,35)"/><text x="5.0378%" y="126.50">_..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:770) (51 samples, 1.07%)</title><rect x="5.6659%" y="132" width="1.0663%" height="15" fill="rgb(232,128,0)"/><text x="5.9159%" y="142.50"></text></g><g><title>_worker (concurrent/futures/thread.py:78) (56 samples, 1.17%)</title><rect x="6.7740%" y="116" width="1.1708%" height="15" fill="rgb(207,160,47)"/><text x="7.0240%" y="126.50"></text></g><g><title>__run_sync_func (azure_functions_worker/dispatcher.py:485) (51 samples, 1.07%)</title><rect x="9.4292%" y="148" width="1.0663%" height="15" fill="rgb(228,23,34)"/><text x="9.6792%" y="158.50"></text></g><g><title>run (concurrent/futures/thread.py:57) (63 samples, 1.32%)</title><rect x="9.1992%" y="132" width="1.3172%" height="15" fill="rgb(218,30,26)"/><text x="9.4492%" y="142.50"></text></g><g><title>_invoke_callbacks (concurrent/futures/_base.py:328) (103 samples, 2.15%)</title><rect x="11.5409%" y="164" width="2.1535%" height="15" fill="rgb(220,122,19)"/><text x="11.7909%" y="174.50">_..</text></g><g><title>_call_set_state (asyncio/futures.py:374) (86 samples, 1.80%)</title><rect x="11.8963%" y="180" width="1.7980%" height="15" fill="rgb(250,228,42)"/><text x="12.1463%" y="190.50">_..</text></g><g><title>_worker (concurrent/futures/thread.py:80) (277 samples, 5.79%)</title><rect x="7.9448%" y="116" width="5.7913%" height="15" fill="rgb(240,193,28)"/><text x="8.1948%" y="126.50">_worker..</text></g><g><title>run (concurrent/futures/thread.py:63) (154 samples, 3.22%)</title><rect x="10.5164%" y="132" width="3.2197%" height="15" fill="rgb(216,20,37)"/><text x="10.7664%" y="142.50">run..</text></g><g><title>set_result (concurrent/futures/_base.py:530) (110 samples, 2.30%)</title><rect x="11.4363%" y="148" width="2.2998%" height="15" fill="rgb(206,188,39)"/><text x="11.6863%" y="158.50">s..</text></g><g><title>__enter__ (threading.py:246) (57 samples, 1.19%)</title><rect x="22.2245%" y="132" width="1.1917%" height="15" fill="rgb(217,207,13)"/><text x="22.4745%" y="142.50"></text></g><g><title>channel_spin (grpc/_channel.py:1138) (562 samples, 11.75%)</title><rect x="14.6143%" y="116" width="11.7499%" height="15" fill="rgb(231,73,38)"/><text x="14.8643%" y="126.50">channel_spin (grp..</text></g><g><title>notify_all (threading.py:371) (52 samples, 1.09%)</title><rect x="25.2770%" y="132" width="1.0872%" height="15" fill="rgb(225,20,46)"/><text x="25.5270%" y="142.50"></text></g><g><title>handle_event (grpc/_channel.py:165) (92 samples, 1.92%)</title><rect x="27.4096%" y="132" width="1.9235%" height="15" fill="rgb(210,31,41)"/><text x="27.6596%" y="142.50">h..</text></g><g><title>__enter__ (threading.py:247) (70 samples, 1.46%)</title><rect x="27.8695%" y="148" width="1.4635%" height="15" fill="rgb(221,200,47)"/><text x="28.1195%" y="158.50"></text></g><g><title>_handle_event (grpc/_channel.py:137) (59 samples, 1.23%)</title><rect x="30.6920%" y="148" width="1.2335%" height="15" fill="rgb(226,26,5)"/><text x="30.9420%" y="158.50"></text></g><g><title>deserialize (grpc/_common.py:94) (55 samples, 1.15%)</title><rect x="30.7757%" y="164" width="1.1499%" height="15" fill="rgb(249,33,26)"/><text x="31.0257%" y="174.50"></text></g><g><title>_transform (grpc/_common.py:83) (48 samples, 1.00%)</title><rect x="30.9220%" y="180" width="1.0036%" height="15" fill="rgb(235,183,28)"/><text x="31.1720%" y="190.50"></text></g><g><title>handle_event (grpc/_channel.py:166) (126 samples, 2.63%)</title><rect x="29.3331%" y="132" width="2.6343%" height="15" fill="rgb(221,5,38)"/><text x="29.5831%" y="142.50">ha..</text></g><g><title>handle_event (grpc/_channel.py:167) (140 samples, 2.93%)</title><rect x="31.9674%" y="132" width="2.9270%" height="15" fill="rgb(247,18,42)"/><text x="32.2174%" y="142.50">ha..</text></g><g><title>notify_all (threading.py:371) (107 samples, 2.24%)</title><rect x="32.6573%" y="148" width="2.2371%" height="15" fill="rgb(241,131,45)"/><text x="32.9073%" y="158.50">n..</text></g><g><title>channel_spin (grpc/_channel.py:1141) (432 samples, 9.03%)</title><rect x="26.5315%" y="116" width="9.0320%" height="15" fill="rgb(249,31,29)"/><text x="26.7815%" y="126.50">channel_spin ..</text></g><g><title>get (queue.py:181) (58 samples, 1.21%)</title><rect x="38.5532%" y="148" width="1.2126%" height="15" fill="rgb(225,111,53)"/><text x="38.8032%" y="158.50"></text></g><g><title>gen (azure_functions_worker/dispatcher.py:515) (209 samples, 4.37%)</title><rect x="36.2952%" y="132" width="4.3696%" height="15" fill="rgb(238,160,17)"/><text x="36.5452%" y="142.50">gen (..</text></g><g><title>consume_request_iterator (grpc/_channel.py:195) (320 samples, 6.69%)</title><rect x="35.7307%" y="116" width="6.6904%" height="15" fill="rgb(214,148,48)"/><text x="35.9807%" y="126.50">consume_r..</text></g><g><title>gen (azure_functions_worker/dispatcher.py:519) (73 samples, 1.53%)</title><rect x="40.8948%" y="132" width="1.5262%" height="15" fill="rgb(232,36,49)"/><text x="41.1448%" y="142.50"></text></g><g><title>consume_request_iterator (grpc/_channel.py:211) (121 samples, 2.53%)</title><rect x="42.5465%" y="116" width="2.5298%" height="15" fill="rgb(209,103,24)"/><text x="42.7965%" y="126.50">co..</text></g><g><title>serialize (grpc/_common.py:90) (97 samples, 2.03%)</title><rect x="43.0483%" y="132" width="2.0280%" height="15" fill="rgb(229,88,8)"/><text x="43.2983%" y="142.50">s..</text></g><g><title>_transform (grpc/_common.py:83) (79 samples, 1.65%)</title><rect x="43.4246%" y="148" width="1.6517%" height="15" fill="rgb(213,181,19)"/><text x="43.6746%" y="158.50"></text></g><g><title>consume_request_iterator (grpc/_channel.py:225) (213 samples, 4.45%)</title><rect x="46.3308%" y="116" width="4.4533%" height="15" fill="rgb(254,191,54)"/><text x="46.5808%" y="126.50">consu..</text></g><g><title>wait (grpc/_common.py:137) (49 samples, 1.02%)</title><rect x="51.5158%" y="132" width="1.0245%" height="15" fill="rgb(241,83,37)"/><text x="51.7658%" y="142.50"></text></g><g><title>consume_request_iterator (grpc/_channel.py:236) (115 samples, 2.40%)</title><rect x="51.0767%" y="116" width="2.4043%" height="15" fill="rgb(233,36,39)"/><text x="51.3267%" y="126.50">co..</text></g><g><title>__call__ (_pydev_bundle/pydev_monkey.py:823) (2,594 samples, 54.23%)</title><rect x="0.0000%" y="52" width="54.2337%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="62.50">__call__ (_pydev_bundle/pydev_monkey.py:823)</text></g><g><title>_bootstrap (threading.py:890) (2,594 samples, 54.23%)</title><rect x="0.0000%" y="68" width="54.2337%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="78.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (2,594 samples, 54.23%)</title><rect x="0.0000%" y="84" width="54.2337%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="94.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (2,594 samples, 54.23%)</title><rect x="0.0000%" y="100" width="54.2337%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="110.50">run (threading.py:870)</text></g><g><title>handle (logging/__init__.py:950) (120 samples, 2.51%)</title><rect x="63.2866%" y="388" width="2.5089%" height="15" fill="rgb(231,60,39)"/><text x="63.5366%" y="398.50">ha..</text></g><g><title>emit (azure_functions_worker/dispatcher.py:546) (89 samples, 1.86%)</title><rect x="63.9348%" y="404" width="1.8608%" height="15" fill="rgb(208,69,12)"/><text x="64.1848%" y="414.50">e..</text></g><g><title>callHandlers (logging/__init__.py:1649) (131 samples, 2.74%)</title><rect x="63.1194%" y="372" width="2.7389%" height="15" fill="rgb(235,93,37)"/><text x="63.3694%" y="382.50">ca..</text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:306) (212 samples, 4.43%)</title><rect x="61.4468%" y="308" width="4.4324%" height="15" fill="rgb(213,116,39)"/><text x="61.6968%" y="318.50">_hand..</text></g><g><title>info (logging/__init__.py:1434) (206 samples, 4.31%)</title><rect x="61.5722%" y="324" width="4.3069%" height="15" fill="rgb(222,207,29)"/><text x="61.8222%" y="334.50">info ..</text></g><g><title>_log (logging/__init__.py:1577) (146 samples, 3.05%)</title><rect x="62.8267%" y="340" width="3.0525%" height="15" fill="rgb(206,96,30)"/><text x="63.0767%" y="350.50">_lo..</text></g><g><title>handle (logging/__init__.py:1587) (139 samples, 2.91%)</title><rect x="62.9730%" y="356" width="2.9061%" height="15" fill="rgb(218,138,4)"/><text x="63.2230%" y="366.50">ha..</text></g><g><title>from_typed_data (azure_functions_worker/bindings/datumdef.py:60) (52 samples, 1.09%)</title><rect x="67.6354%" y="340" width="1.0872%" height="15" fill="rgb(250,191,14)"/><text x="67.8854%" y="350.50"></text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:64) (128 samples, 2.68%)</title><rect x="67.1754%" y="324" width="2.6761%" height="15" fill="rgb(239,60,40)"/><text x="67.4254%" y="334.50">fr..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:66) (58 samples, 1.21%)</title><rect x="69.9979%" y="324" width="1.2126%" height="15" fill="rgb(206,27,48)"/><text x="70.2479%" y="334.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:321) (281 samples, 5.87%)</title><rect x="66.6945%" y="308" width="5.8750%" height="15" fill="rgb(225,35,8)"/><text x="66.9445%" y="318.50">_handle..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:74) (57 samples, 1.19%)</title><rect x="71.3778%" y="324" width="1.1917%" height="15" fill="rgb(250,213,24)"/><text x="71.6278%" y="334.50"></text></g><g><title>_log (logging/__init__.py:1575) (65 samples, 1.36%)</title><rect x="73.2176%" y="340" width="1.3590%" height="15" fill="rgb(247,123,22)"/><text x="73.4676%" y="350.50"></text></g><g><title>makeRecord (logging/__init__.py:1544) (55 samples, 1.15%)</title><rect x="73.4267%" y="356" width="1.1499%" height="15" fill="rgb(231,138,38)"/><text x="73.6767%" y="366.50"></text></g><g><title>handle (logging/__init__.py:950) (125 samples, 2.61%)</title><rect x="75.2666%" y="388" width="2.6134%" height="15" fill="rgb(231,145,46)"/><text x="75.5166%" y="398.50">ha..</text></g><g><title>emit (azure_functions_worker/dispatcher.py:546) (96 samples, 2.01%)</title><rect x="75.8729%" y="404" width="2.0071%" height="15" fill="rgb(251,118,11)"/><text x="76.1229%" y="414.50">e..</text></g><g><title>callHandlers (logging/__init__.py:1649) (149 samples, 3.12%)</title><rect x="74.8902%" y="372" width="3.1152%" height="15" fill="rgb(217,147,25)"/><text x="75.1402%" y="382.50">cal..</text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:340) (254 samples, 5.31%)</title><rect x="72.7159%" y="308" width="5.3105%" height="15" fill="rgb(247,81,37)"/><text x="72.9659%" y="318.50">_handle..</text></g><g><title>info (logging/__init__.py:1434) (246 samples, 5.14%)</title><rect x="72.8831%" y="324" width="5.1432%" height="15" fill="rgb(209,12,38)"/><text x="73.1331%" y="334.50">info (..</text></g><g><title>_log (logging/__init__.py:1577) (165 samples, 3.45%)</title><rect x="74.5766%" y="340" width="3.4497%" height="15" fill="rgb(227,1,9)"/><text x="74.8266%" y="350.50">_lo..</text></g><g><title>handle (logging/__init__.py:1587) (157 samples, 3.28%)</title><rect x="74.7439%" y="356" width="3.2825%" height="15" fill="rgb(248,47,43)"/><text x="74.9939%" y="366.50">han..</text></g><g><title>run_in_executor (asyncio/base_events.py:782) (76 samples, 1.59%)</title><rect x="78.7999%" y="324" width="1.5890%" height="15" fill="rgb(221,10,30)"/><text x="79.0499%" y="334.50"></text></g><g><title>wrap_future (asyncio/futures.py:389) (54 samples, 1.13%)</title><rect x="79.2599%" y="340" width="1.1290%" height="15" fill="rgb(210,229,1)"/><text x="79.5099%" y="350.50"></text></g><g><title>run_in_executor (asyncio/base_events.py:783) (73 samples, 1.53%)</title><rect x="80.3889%" y="324" width="1.5262%" height="15" fill="rgb(222,148,37)"/><text x="80.6389%" y="334.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:343) (183 samples, 3.83%)</title><rect x="78.1309%" y="308" width="3.8261%" height="15" fill="rgb(234,67,33)"/><text x="78.3809%" y="318.50">_han..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:90) (80 samples, 1.67%)</title><rect x="82.9605%" y="324" width="1.6726%" height="15" fill="rgb(247,98,35)"/><text x="83.2105%" y="334.50"></text></g><g><title>datum_as_proto (azure_functions_worker/bindings/datumdef.py:104) (53 samples, 1.11%)</title><rect x="84.6540%" y="340" width="1.1081%" height="15" fill="rgb(247,138,52)"/><text x="84.9040%" y="350.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:372) (181 samples, 3.78%)</title><rect x="82.3751%" y="308" width="3.7842%" height="15" fill="rgb(213,79,30)"/><text x="82.6251%" y="318.50">_han..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:98) (73 samples, 1.53%)</title><rect x="84.6331%" y="324" width="1.5262%" height="15" fill="rgb(246,177,23)"/><text x="84.8831%" y="334.50"></text></g><g><title>_log (logging/__init__.py:1575) (51 samples, 1.07%)</title><rect x="87.1420%" y="340" width="1.0663%" height="15" fill="rgb(230,62,27)"/><text x="87.3920%" y="350.50"></text></g><g><title>handle (logging/__init__.py:950) (125 samples, 2.61%)</title><rect x="88.6682%" y="388" width="2.6134%" height="15" fill="rgb(216,154,8)"/><text x="88.9182%" y="398.50">ha..</text></g><g><title>emit (azure_functions_worker/dispatcher.py:546) (96 samples, 2.01%)</title><rect x="89.2745%" y="404" width="2.0071%" height="15" fill="rgb(244,35,45)"/><text x="89.5245%" y="414.50">e..</text></g><g><title>callHandlers (logging/__init__.py:1649) (140 samples, 2.93%)</title><rect x="88.4591%" y="372" width="2.9270%" height="15" fill="rgb(251,115,12)"/><text x="88.7091%" y="382.50">ca..</text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:379) (238 samples, 4.98%)</title><rect x="86.4938%" y="308" width="4.9760%" height="15" fill="rgb(240,54,50)"/><text x="86.7438%" y="318.50">_handl..</text></g><g><title>info (logging/__init__.py:1434) (226 samples, 4.73%)</title><rect x="86.7447%" y="324" width="4.7251%" height="15" fill="rgb(233,84,52)"/><text x="86.9947%" y="334.50">info (..</text></g><g><title>_log (logging/__init__.py:1577) (156 samples, 3.26%)</title><rect x="88.2082%" y="340" width="3.2616%" height="15" fill="rgb(207,117,47)"/><text x="88.4582%" y="350.50">_lo..</text></g><g><title>handle (logging/__init__.py:1587) (150 samples, 3.14%)</title><rect x="88.3337%" y="356" width="3.1361%" height="15" fill="rgb(249,43,39)"/><text x="88.5837%" y="366.50">han..</text></g><g><title>_dispatch_grpc_request (azure_functions_worker/dispatcher.py:234) (1,578 samples, 32.99%)</title><rect x="59.2724%" y="292" width="32.9918%" height="15" fill="rgb(209,38,44)"/><text x="59.5224%" y="302.50">_dispatch_grpc_request (azure_functions_worker/dispat..</text></g><g><title>_read_from_self (asyncio/selector_events.py:120) (133 samples, 2.78%)</title><rect x="92.9124%" y="292" width="2.7807%" height="15" fill="rgb(236,212,23)"/><text x="93.1624%" y="302.50">_r..</text></g><g><title>_set_state (asyncio/futures.py:356) (106 samples, 2.22%)</title><rect x="95.9858%" y="292" width="2.2162%" height="15" fill="rgb(242,79,21)"/><text x="96.2358%" y="302.50">_..</text></g><g><title>create_task (asyncio/base_events.py:435) (68 samples, 1.42%)</title><rect x="98.3483%" y="292" width="1.4217%" height="15" fill="rgb(211,96,35)"/><text x="98.5983%" y="302.50"></text></g><g><title>&lt;lambda&gt; (azure_functions_worker/dispatcher.py:115) (68 samples, 1.42%)</title><rect x="98.3483%" y="308" width="1.4217%" height="15" fill="rgb(253,215,40)"/><text x="98.5983%" y="318.50"></text></g><g><title>_run (asyncio/events.py:81) (2,017 samples, 42.17%)</title><rect x="57.6835%" y="276" width="42.1702%" height="15" fill="rgb(211,81,21)"/><text x="57.9335%" y="286.50">_run (asyncio/events.py:81)</text></g><g><title>_run_once (asyncio/base_events.py:1859) (2,054 samples, 42.94%)</title><rect x="56.9517%" y="260" width="42.9438%" height="15" fill="rgb(208,190,38)"/><text x="57.2017%" y="270.50">_run_once (asyncio/base_events.py:1859)</text></g><g><title>run_forever (asyncio/base_events.py:570) (2,142 samples, 44.78%)</title><rect x="55.1955%" y="244" width="44.7836%" height="15" fill="rgb(235,213,38)"/><text x="55.4455%" y="254.50">run_forever (asyncio/base_events.py:570)</text></g><g><title>all (4,783 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="46.50"></text></g><g><title>_run_module_as_main (runpy.py:194) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="52" width="44.8045%" height="15" fill="rgb(244,218,35)"/><text x="55.4455%" y="62.50">_run_module_as_main (runpy.py:194)</text></g><g><title>_run_code (runpy.py:87) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="68" width="44.8045%" height="15" fill="rgb(240,68,47)"/><text x="55.4455%" y="78.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (debugpy/__main__.py:45) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="84" width="44.8045%" height="15" fill="rgb(210,16,53)"/><text x="55.4455%" y="94.50">&lt;module&gt; (debugpy/__main__.py:45)</text></g><g><title>main (debugpy/server/cli.py:430) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="100" width="44.8045%" height="15" fill="rgb(235,124,12)"/><text x="55.4455%" y="110.50">main (debugpy/server/cli.py:430)</text></g><g><title>run_file (debugpy/server/cli.py:267) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="116" width="44.8045%" height="15" fill="rgb(224,169,11)"/><text x="55.4455%" y="126.50">run_file (debugpy/server/cli.py:267)</text></g><g><title>run_path (runpy.py:265) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="132" width="44.8045%" height="15" fill="rgb(250,166,2)"/><text x="55.4455%" y="142.50">run_path (runpy.py:265)</text></g><g><title>_run_module_code (runpy.py:97) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="148" width="44.8045%" height="15" fill="rgb(242,216,29)"/><text x="55.4455%" y="158.50">_run_module_code (runpy.py:97)</text></g><g><title>_run_code (runpy.py:87) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="164" width="44.8045%" height="15" fill="rgb(230,116,27)"/><text x="55.4455%" y="174.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (worker.py:19) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="180" width="44.8045%" height="15" fill="rgb(228,99,48)"/><text x="55.4455%" y="190.50">&lt;module&gt; (worker.py:19)</text></g><g><title>main (azure_functions_worker/main.py:40) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="196" width="44.8045%" height="15" fill="rgb(253,11,6)"/><text x="55.4455%" y="206.50">main (azure_functions_worker/main.py:40)</text></g><g><title>run (asyncio/runners.py:43) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="212" width="44.8045%" height="15" fill="rgb(247,143,39)"/><text x="55.4455%" y="222.50">run (asyncio/runners.py:43)</text></g><g><title>run_until_complete (asyncio/base_events.py:603) (2,143 samples, 44.80%)</title><rect x="55.1955%" y="228" width="44.8045%" height="15" fill="rgb(236,97,10)"/><text x="55.4455%" y="238.50">run_until_complete (asyncio/base_events.py:603)</text></g></svg></svg>