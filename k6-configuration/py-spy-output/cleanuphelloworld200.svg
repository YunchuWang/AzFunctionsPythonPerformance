<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>_next (grpc/_channel.py:681) (143 samples, 2.47%)</title><rect x="1.9028%" y="164" width="2.4736%" height="15" fill="rgb(227,0,7)"/><text x="2.1528%" y="174.50">_n..</text></g><g><title>_next (grpc/_channel.py:697) (82 samples, 1.42%)</title><rect x="4.6013%" y="164" width="1.4184%" height="15" fill="rgb(217,0,24)"/><text x="4.8513%" y="174.50"></text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:526) (366 samples, 6.33%)</title><rect x="0.0000%" y="132" width="6.3311%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="142.50">__poll_g..</text></g><g><title>__next__ (grpc/_channel.py:416) (331 samples, 5.73%)</title><rect x="0.6054%" y="148" width="5.7257%" height="15" fill="rgb(248,212,6)"/><text x="0.8554%" y="158.50">__next_..</text></g><g><title>__poll_grpc (azure_functions_worker/dispatcher.py:527) (182 samples, 3.15%)</title><rect x="6.3311%" y="132" width="3.1482%" height="15" fill="rgb(208,68,35)"/><text x="6.5811%" y="142.50">__p..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:770) (101 samples, 1.75%)</title><rect x="7.7322%" y="148" width="1.7471%" height="15" fill="rgb(232,128,0)"/><text x="7.9822%" y="158.50"></text></g><g><title>_write_to_self (asyncio/selector_events.py:138) (88 samples, 1.52%)</title><rect x="7.9571%" y="164" width="1.5222%" height="15" fill="rgb(207,160,47)"/><text x="8.2071%" y="174.50"></text></g><g><title>_worker (concurrent/futures/thread.py:78) (66 samples, 1.14%)</title><rect x="9.5485%" y="132" width="1.1417%" height="15" fill="rgb(228,23,34)"/><text x="9.7985%" y="142.50"></text></g><g><title>__run_sync_func (azure_functions_worker/dispatcher.py:488) (83 samples, 1.44%)</title><rect x="12.1778%" y="164" width="1.4357%" height="15" fill="rgb(218,30,26)"/><text x="12.4278%" y="174.50"></text></g><g><title>main (SyncHttpTriggerHelloWorld/__init__.py:7) (72 samples, 1.25%)</title><rect x="12.3681%" y="180" width="1.2455%" height="15" fill="rgb(220,122,19)"/><text x="12.6181%" y="190.50"></text></g><g><title>run (concurrent/futures/thread.py:57) (104 samples, 1.80%)</title><rect x="11.8319%" y="148" width="1.7990%" height="15" fill="rgb(250,228,42)"/><text x="12.0819%" y="158.50">r..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:770) (75 samples, 1.30%)</title><rect x="16.5715%" y="212" width="1.2974%" height="15" fill="rgb(240,193,28)"/><text x="16.8215%" y="222.50"></text></g><g><title>_worker (concurrent/futures/thread.py:80) (414 samples, 7.16%)</title><rect x="10.7248%" y="132" width="7.1614%" height="15" fill="rgb(216,20,37)"/><text x="10.9748%" y="142.50">_worker (c..</text></g><g><title>run (concurrent/futures/thread.py:63) (246 samples, 4.26%)</title><rect x="13.6309%" y="148" width="4.2553%" height="15" fill="rgb(206,188,39)"/><text x="13.8809%" y="158.50">run (..</text></g><g><title>set_result (concurrent/futures/_base.py:530) (177 samples, 3.06%)</title><rect x="14.8244%" y="164" width="3.0618%" height="15" fill="rgb(217,207,13)"/><text x="15.0744%" y="174.50">set..</text></g><g><title>_invoke_callbacks (concurrent/futures/_base.py:328) (163 samples, 2.82%)</title><rect x="15.0666%" y="180" width="2.8196%" height="15" fill="rgb(231,73,38)"/><text x="15.3166%" y="190.50">_i..</text></g><g><title>_call_set_state (asyncio/futures.py:374) (150 samples, 2.59%)</title><rect x="15.2915%" y="196" width="2.5947%" height="15" fill="rgb(225,20,46)"/><text x="15.5415%" y="206.50">_c..</text></g><g><title>_worker (concurrent/futures/thread.py:87) (83 samples, 1.44%)</title><rect x="17.9727%" y="132" width="1.4357%" height="15" fill="rgb(210,31,41)"/><text x="18.2227%" y="142.50"></text></g><g><title>channel_spin (grpc/_channel.py:1138) (469 samples, 8.11%)</title><rect x="19.5814%" y="132" width="8.1128%" height="15" fill="rgb(221,200,47)"/><text x="19.8314%" y="142.50">channel_spi..</text></g><g><title>handle_event (grpc/_channel.py:165) (83 samples, 1.44%)</title><rect x="28.3342%" y="148" width="1.4357%" height="15" fill="rgb(226,26,5)"/><text x="28.5842%" y="158.50"></text></g><g><title>__enter__ (threading.py:247) (62 samples, 1.07%)</title><rect x="28.6975%" y="164" width="1.0725%" height="15" fill="rgb(249,33,26)"/><text x="28.9475%" y="174.50"></text></g><g><title>_handle_event (grpc/_channel.py:137) (117 samples, 2.02%)</title><rect x="30.8770%" y="164" width="2.0239%" height="15" fill="rgb(235,183,28)"/><text x="31.1270%" y="174.50">_..</text></g><g><title>deserialize (grpc/_common.py:94) (106 samples, 1.83%)</title><rect x="31.0673%" y="180" width="1.8336%" height="15" fill="rgb(221,5,38)"/><text x="31.3173%" y="190.50">d..</text></g><g><title>_transform (grpc/_common.py:83) (94 samples, 1.63%)</title><rect x="31.2749%" y="196" width="1.6260%" height="15" fill="rgb(247,18,42)"/><text x="31.5249%" y="206.50"></text></g><g><title>handle_event (grpc/_channel.py:166) (186 samples, 3.22%)</title><rect x="29.7699%" y="148" width="3.2174%" height="15" fill="rgb(241,131,45)"/><text x="30.0199%" y="158.50">han..</text></g><g><title>handle_event (grpc/_channel.py:167) (76 samples, 1.31%)</title><rect x="32.9874%" y="148" width="1.3147%" height="15" fill="rgb(249,31,29)"/><text x="33.2374%" y="158.50"></text></g><g><title>notify_all (threading.py:371) (62 samples, 1.07%)</title><rect x="33.2295%" y="164" width="1.0725%" height="15" fill="rgb(225,111,53)"/><text x="33.4795%" y="174.50"></text></g><g><title>channel_spin (grpc/_channel.py:1141) (403 samples, 6.97%)</title><rect x="27.8153%" y="132" width="6.9711%" height="15" fill="rgb(238,160,17)"/><text x="28.0653%" y="142.50">channel_s..</text></g><g><title>gen (azure_functions_worker/dispatcher.py:518) (113 samples, 1.95%)</title><rect x="35.3053%" y="148" width="1.9547%" height="15" fill="rgb(214,148,48)"/><text x="35.5553%" y="158.50">g..</text></g><g><title>consume_request_iterator (grpc/_channel.py:195) (200 samples, 3.46%)</title><rect x="34.8210%" y="132" width="3.4596%" height="15" fill="rgb(232,36,49)"/><text x="35.0710%" y="142.50">con..</text></g><g><title>consume_request_iterator (grpc/_channel.py:211) (120 samples, 2.08%)</title><rect x="38.3498%" y="132" width="2.0758%" height="15" fill="rgb(209,103,24)"/><text x="38.5998%" y="142.50">c..</text></g><g><title>serialize (grpc/_common.py:90) (106 samples, 1.83%)</title><rect x="38.5919%" y="148" width="1.8336%" height="15" fill="rgb(229,88,8)"/><text x="38.8419%" y="158.50">s..</text></g><g><title>_transform (grpc/_common.py:83) (93 samples, 1.61%)</title><rect x="38.8168%" y="164" width="1.6087%" height="15" fill="rgb(213,181,19)"/><text x="39.0668%" y="174.50"></text></g><g><title>consume_request_iterator (grpc/_channel.py:225) (189 samples, 3.27%)</title><rect x="41.3596%" y="132" width="3.2693%" height="15" fill="rgb(254,191,54)"/><text x="41.6096%" y="142.50">con..</text></g><g><title>consume_request_iterator (grpc/_channel.py:236) (78 samples, 1.35%)</title><rect x="44.8711%" y="132" width="1.3492%" height="15" fill="rgb(241,83,37)"/><text x="45.1211%" y="142.50"></text></g><g><title>__call__ (_pydev_bundle/pydev_monkey.py:823) (2,698 samples, 46.67%)</title><rect x="0.0000%" y="68" width="46.6701%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="78.50">__call__ (_pydev_bundle/pydev_monkey.py:823)</text></g><g><title>_bootstrap (threading.py:890) (2,698 samples, 46.67%)</title><rect x="0.0000%" y="84" width="46.6701%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="94.50">_bootstrap (threading.py:890)</text></g><g><title>_bootstrap_inner (threading.py:932) (2,698 samples, 46.67%)</title><rect x="0.0000%" y="100" width="46.6701%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="110.50">_bootstrap_inner (threading.py:932)</text></g><g><title>run (threading.py:870) (2,698 samples, 46.67%)</title><rect x="0.0000%" y="116" width="46.6701%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="126.50">run (threading.py:870)</text></g><g><title>_bootstrap (threading.py:890) (98 samples, 1.70%)</title><rect x="46.6701%" y="68" width="1.6952%" height="15" fill="rgb(232,182,51)"/><text x="46.9201%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:932) (98 samples, 1.70%)</title><rect x="46.6701%" y="84" width="1.6952%" height="15" fill="rgb(231,60,39)"/><text x="46.9201%" y="94.50"></text></g><g><title>run (_pydevd_bundle/pydevd_daemon_thread.py:46) (98 samples, 1.70%)</title><rect x="46.6701%" y="100" width="1.6952%" height="15" fill="rgb(208,69,12)"/><text x="46.9201%" y="110.50"></text></g><g><title>&lt;dictcomp&gt; (azure_functions_worker/bindings/datumdef.py:60) (75 samples, 1.30%)</title><rect x="62.2211%" y="372" width="1.2974%" height="15" fill="rgb(235,93,37)"/><text x="62.4711%" y="382.50"></text></g><g><title>from_typed_data (azure_functions_worker/bindings/datumdef.py:60) (119 samples, 2.06%)</title><rect x="62.1173%" y="356" width="2.0585%" height="15" fill="rgb(213,116,39)"/><text x="62.3673%" y="366.50">f..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:64) (267 samples, 4.62%)</title><rect x="61.4773%" y="340" width="4.6186%" height="15" fill="rgb(222,207,29)"/><text x="61.7273%" y="350.50">from_..</text></g><g><title>&lt;dictcomp&gt; (azure_functions_worker/bindings/meta.py:67) (65 samples, 1.12%)</title><rect x="67.4278%" y="356" width="1.1244%" height="15" fill="rgb(206,96,30)"/><text x="67.6778%" y="366.50"></text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:66) (127 samples, 2.20%)</title><rect x="66.4245%" y="340" width="2.1969%" height="15" fill="rgb(218,138,4)"/><text x="66.6745%" y="350.50">f..</text></g><g><title>__init__ (functions/http.py:39) (61 samples, 1.06%)</title><rect x="69.4690%" y="372" width="1.0552%" height="15" fill="rgb(250,191,14)"/><text x="69.7190%" y="382.50"></text></g><g><title>decode (functions/http.py:126) (78 samples, 1.35%)</title><rect x="69.1922%" y="356" width="1.3492%" height="15" fill="rgb(239,60,40)"/><text x="69.4422%" y="366.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:319) (599 samples, 10.36%)</title><rect x="60.6815%" y="324" width="10.3615%" height="15" fill="rgb(206,27,48)"/><text x="60.9315%" y="334.50">_handle__invoca..</text></g><g><title>from_incoming_proto (azure_functions_worker/bindings/meta.py:74) (118 samples, 2.04%)</title><rect x="69.0019%" y="340" width="2.0412%" height="15" fill="rgb(225,35,8)"/><text x="69.2519%" y="350.50">f..</text></g><g><title>run_in_executor (asyncio/base_events.py:782) (126 samples, 2.18%)</title><rect x="72.3231%" y="340" width="2.1796%" height="15" fill="rgb(250,213,24)"/><text x="72.5731%" y="350.50">r..</text></g><g><title>wrap_future (asyncio/futures.py:389) (76 samples, 1.31%)</title><rect x="73.1880%" y="356" width="1.3147%" height="15" fill="rgb(247,123,22)"/><text x="73.4380%" y="366.50"></text></g><g><title>run_in_executor (asyncio/base_events.py:783) (128 samples, 2.21%)</title><rect x="74.5027%" y="340" width="2.2141%" height="15" fill="rgb(231,138,38)"/><text x="74.7527%" y="350.50">r..</text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:341) (324 samples, 5.60%)</title><rect x="71.1815%" y="324" width="5.6046%" height="15" fill="rgb(231,145,46)"/><text x="71.4315%" y="334.50">_handle..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:90) (174 samples, 3.01%)</title><rect x="78.5677%" y="340" width="3.0099%" height="15" fill="rgb(251,118,11)"/><text x="78.8177%" y="350.50">to_..</text></g><g><title>datum_as_proto (azure_functions_worker/bindings/datumdef.py:104) (91 samples, 1.57%)</title><rect x="81.6122%" y="356" width="1.5741%" height="15" fill="rgb(217,147,25)"/><text x="81.8622%" y="366.50"></text></g><g><title>_handle__invocation_request (azure_functions_worker/dispatcher.py:370) (376 samples, 6.50%)</title><rect x="77.4088%" y="324" width="6.5041%" height="15" fill="rgb(247,81,37)"/><text x="77.6588%" y="334.50">_handle__..</text></g><g><title>to_outgoing_proto (azure_functions_worker/bindings/meta.py:98) (135 samples, 2.34%)</title><rect x="81.5776%" y="340" width="2.3352%" height="15" fill="rgb(209,12,38)"/><text x="81.8276%" y="350.50">t..</text></g><g><title>_dispatch_grpc_request (azure_functions_worker/dispatcher.py:229) (1,784 samples, 30.86%)</title><rect x="55.4229%" y="308" width="30.8597%" height="15" fill="rgb(227,1,9)"/><text x="55.6729%" y="318.50">_dispatch_grpc_request (azure_functions_worker/dis..</text></g><g><title>put_nowait (queue.py:190) (79 samples, 1.37%)</title><rect x="86.5421%" y="324" width="1.3665%" height="15" fill="rgb(248,47,43)"/><text x="86.7921%" y="334.50"></text></g><g><title>_dispatch_grpc_request (azure_functions_worker/dispatcher.py:230) (113 samples, 1.95%)</title><rect x="86.2827%" y="308" width="1.9547%" height="15" fill="rgb(221,10,30)"/><text x="86.5327%" y="318.50">_..</text></g><g><title>_read_from_self (asyncio/selector_events.py:120) (221 samples, 3.82%)</title><rect x="88.3411%" y="308" width="3.8229%" height="15" fill="rgb(210,229,1)"/><text x="88.5911%" y="318.50">_rea..</text></g><g><title>_set_state (asyncio/futures.py:356) (237 samples, 4.10%)</title><rect x="92.6310%" y="308" width="4.0996%" height="15" fill="rgb(222,148,37)"/><text x="92.8810%" y="318.50">_set..</text></g><g><title>_copy_future_state (asyncio/futures.py:335) (101 samples, 1.75%)</title><rect x="94.9836%" y="324" width="1.7471%" height="15" fill="rgb(234,67,33)"/><text x="95.2336%" y="334.50"></text></g><g><title>__init__ (azure_functions_worker/dispatcher.py:564) (88 samples, 1.52%)</title><rect x="97.4745%" y="340" width="1.5222%" height="15" fill="rgb(247,98,35)"/><text x="97.7245%" y="350.50"></text></g><g><title>create_task (asyncio/base_events.py:435) (146 samples, 2.53%)</title><rect x="97.0247%" y="308" width="2.5255%" height="15" fill="rgb(247,138,52)"/><text x="97.2747%" y="318.50">cr..</text></g><g><title>&lt;lambda&gt; (azure_functions_worker/dispatcher.py:110) (143 samples, 2.47%)</title><rect x="97.0766%" y="324" width="2.4736%" height="15" fill="rgb(213,79,30)"/><text x="97.3266%" y="334.50">&lt;l..</text></g><g><title>_run (asyncio/events.py:81) (2,730 samples, 47.22%)</title><rect x="52.5169%" y="292" width="47.2237%" height="15" fill="rgb(246,177,23)"/><text x="52.7669%" y="302.50">_run (asyncio/events.py:81)</text></g><g><title>_run_once (asyncio/base_events.py:1859) (2,787 samples, 48.21%)</title><rect x="51.6347%" y="276" width="48.2097%" height="15" fill="rgb(230,62,27)"/><text x="51.8847%" y="286.50">_run_once (asyncio/base_events.py:1859)</text></g><g><title>all (5,781 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(216,154,8)"/><text x="0.2500%" y="46.50"></text></g><g><title>process 57555:&quot;/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/Resources/Python.app/Contents/MacOS/Python /Users/varadmeru/.vscode/extensions/ms-python.python-2020.8.105369/pythonFiles/lib/python/debugpy --listen 127.0.0.1:9091 --wait-for-client /Users/varadmeru/work/microsoft/azfunctions/pyworker/worker.py --host 127.0.0.1 --port 63554 --workerId 23aaafc8-8ea4-42c4-9d07-0e87a0f32b8f --requestId 3c8c5e0e-fb77-494a-bdde-cdb271ebbdcf --grpcMaxMessageLength 2147483647&quot; (5,781 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(244,35,45)"/><text x="0.2500%" y="62.50">process 57555:&quot;/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/Resources/Python.app/Contents/MacOS/Python /Users/varadmeru/.vscode/extensio..</text></g><g><title>_run_module_as_main (runpy.py:194) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="68" width="51.6347%" height="15" fill="rgb(251,115,12)"/><text x="48.6153%" y="78.50">_run_module_as_main (runpy.py:194)</text></g><g><title>_run_code (runpy.py:87) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="84" width="51.6347%" height="15" fill="rgb(240,54,50)"/><text x="48.6153%" y="94.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (debugpy/__main__.py:45) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="100" width="51.6347%" height="15" fill="rgb(233,84,52)"/><text x="48.6153%" y="110.50">&lt;module&gt; (debugpy/__main__.py:45)</text></g><g><title>main (debugpy/server/cli.py:430) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="116" width="51.6347%" height="15" fill="rgb(207,117,47)"/><text x="48.6153%" y="126.50">main (debugpy/server/cli.py:430)</text></g><g><title>run_file (debugpy/server/cli.py:267) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="132" width="51.6347%" height="15" fill="rgb(249,43,39)"/><text x="48.6153%" y="142.50">run_file (debugpy/server/cli.py:267)</text></g><g><title>run_path (runpy.py:265) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="148" width="51.6347%" height="15" fill="rgb(209,38,44)"/><text x="48.6153%" y="158.50">run_path (runpy.py:265)</text></g><g><title>_run_module_code (runpy.py:97) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="164" width="51.6347%" height="15" fill="rgb(236,212,23)"/><text x="48.6153%" y="174.50">_run_module_code (runpy.py:97)</text></g><g><title>_run_code (runpy.py:87) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="180" width="51.6347%" height="15" fill="rgb(242,79,21)"/><text x="48.6153%" y="190.50">_run_code (runpy.py:87)</text></g><g><title>&lt;module&gt; (worker.py:20) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="196" width="51.6347%" height="15" fill="rgb(211,96,35)"/><text x="48.6153%" y="206.50">&lt;module&gt; (worker.py:20)</text></g><g><title>main (azure_functions_worker/main.py:40) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="212" width="51.6347%" height="15" fill="rgb(253,215,40)"/><text x="48.6153%" y="222.50">main (azure_functions_worker/main.py:40)</text></g><g><title>run (asyncio/runners.py:43) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="228" width="51.6347%" height="15" fill="rgb(211,81,21)"/><text x="48.6153%" y="238.50">run (asyncio/runners.py:43)</text></g><g><title>run_until_complete (asyncio/base_events.py:603) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="244" width="51.6347%" height="15" fill="rgb(208,190,38)"/><text x="48.6153%" y="254.50">run_until_complete (asyncio/base_events.py:603)</text></g><g><title>run_forever (asyncio/base_events.py:570) (2,985 samples, 51.63%)</title><rect x="48.3653%" y="260" width="51.6347%" height="15" fill="rgb(235,213,38)"/><text x="48.6153%" y="270.50">run_forever (asyncio/base_events.py:570)</text></g></svg></svg>